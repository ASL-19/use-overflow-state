{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.52.10",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@asl-19/use-overflow-state!",
  "docComment": "",
  "name": "@asl-19/use-overflow-state",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@asl-19/use-overflow-state!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@asl-19/use-overflow-state!OverflowState:interface",
          "docComment": "/**\n * useOverflowState hook return value\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OverflowState "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "OverflowState",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@asl-19/use-overflow-state!OverflowState#horizontalScrollBarHasGutter:member",
              "docComment": "/**\n * Does the horizontal scroll bar have a gutter (reserved space)?\n *\n * @remarks\n *\n * Overlay scroll bars will never have a gutter; classic scroll bars will have a gutter if the scrollable element has overflow.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "horizontalScrollBarHasGutter: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "horizontalScrollBarHasGutter",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@asl-19/use-overflow-state!OverflowState#leftHasOverflow:member",
              "docComment": "/**\n * Is there overflow on the left side?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "leftHasOverflow: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "leftHasOverflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@asl-19/use-overflow-state!OverflowState#rightHasOverflow:member",
              "docComment": "/**\n * Is there overflow on the right side?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rightHasOverflow: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rightHasOverflow",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@asl-19/use-overflow-state!useOverflowState:function(1)",
          "docComment": "/**\n * Hook that returns the overflow state of the provided scrollable element (arguments: {@link UseOverflowStateArgs})\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useOverflowState: ({ scrollableElementRef, wrapperElementRef, }: "
            },
            {
              "kind": "Reference",
              "text": "UseOverflowStateArgs",
              "canonicalReference": "@asl-19/use-overflow-state!UseOverflowStateArgs:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "OverflowState",
              "canonicalReference": "@asl-19/use-overflow-state!OverflowState:interface"
            }
          ],
          "fileUrlPath": "src/index.ts",
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "{ scrollableElementRef, wrapperElementRef, }",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useOverflowState"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@asl-19/use-overflow-state!UseOverflowStateArgs:interface",
          "docComment": "/**\n * useOverflowState hook arguments\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface UseOverflowStateArgs "
            }
          ],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "Public",
          "name": "UseOverflowStateArgs",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@asl-19/use-overflow-state!UseOverflowStateArgs#scrollableElementRef:member",
              "docComment": "/**\n * Ref for the scrollable element (must have `overflow-x: auto` or `overflow-x: visible`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "scrollableElementRef: "
                },
                {
                  "kind": "Reference",
                  "text": "RefObject",
                  "canonicalReference": "@types/react!React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "scrollableElementRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@asl-19/use-overflow-state!UseOverflowStateArgs#wrapperElementRef:member",
              "docComment": "/**\n * Ref for the wrapper element (used to determine if scroll bar is inset).\n *\n * @remarks\n *\n * You’ll probably want to apply the overflow indicator styles to this element.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "wrapperElementRef: "
                },
                {
                  "kind": "Reference",
                  "text": "RefObject",
                  "canonicalReference": "@types/react!React.RefObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "HTMLElement",
                  "canonicalReference": "!HTMLElement:interface"
                },
                {
                  "kind": "Content",
                  "text": "> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isReadonly": false,
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wrapperElementRef",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        }
      ]
    }
  ]
}
